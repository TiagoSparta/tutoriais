--- Deploy Django AWS ---
-Iniciar nova Instância AWS
	-Em Imagens de Aplicação, escolher Ubuntu Server na versão mais nova que tiver
	-Atribuir IP público automaticamente (Auto-assign Public IP)
		-Importante habilitar para ter IP fixo
		-HD até 30 GB
	-Security Group
		-SSH TCP 22
		-Custom TCP TCP 80
		
-Instalar POSTGRESS e configurar banco de dados
	-Instalar
	$ sudo apt-get install postgresql postgresql-contrib
	$ sudo -i -u postgres (acessar usuario do linux postgres)
	$ psql (entra no psql)
	# \conninfo (ver dados conexão)
	# \l (listar bancos)
	# \password postgres (colocar senha no usuario padrao "Master")
	# \q (volta para terminal linux)
	-Criar novo usuário, sem acesso master e sem privilégios, para ser utilizado na consulta do banco
		$ createuser -P nome_usuario
			-Utilizar senha diferente do usuário master, garantindo maior segurança
		$ psql
		#\du (listar usuarios)
	- Logar com novo usuário
		$ psql -U novo_usuario
			- FATAL: Peer authentication failed for user
			- Erro porque usuário não está no pg_hba.conf
			$ sudo vim /etc/postgresql/versao/main/pg_hba.conf
				# Database administrative login by Unix domain socket
				local     all     postgres         md5
				local     all     novo_usuario     md5
			$ sudo systemctl restart postgresql
		$ psql -U nome_usuario
			- FATAL: database "novo_usuario" does not exist
			- Se não indicar banco vai tentar logar no banco com mesmo nome que usuário
		$ psql -U nome_usuario nome_banco_de_dados
			Ex: $ psql -U nome_usuario postgres
	-Criar banco utilizando o psql do usuario postgres (master) pq o novo usuário não tem poderes para criar bancos
		# CREATE DATABASE nome_banco;
	-Configurar pesquisa sem acentuação no banco
		# CREATE EXTENSION unaccent;
		# CREATE TEXT SEARCH CONFIGURATION french_unaccent( COPY = french );
		# ALTER TEXT SEARCH CONFIGURATION french_unaccent ALTER MAPPING FOR hword, hword_part, word WITH unaccent, french_stem;

-Alterar Locale para brasil
	-Verificar Locale atual
		$ locale
	-Listar locais instalados
		$ locale -a
	-Se não tiver pt_BR.UTF-8
		$ sudo locale-gen pt_BR.UTF-8
		: pt_BR.UTF-8… done
		: Generation complete.
	-Reconfigurar pacotes após estarem instalados
		$ sudo dpkg-reconfigure locales
		-Verificar se pt_BR.UTF-8 está marcado
		-Escolher também na última tela
		: Generation Complete
	-Atualizar idioma padrão
		$ sudo update-locale LANG=pt_BR.UTF-8
	-Consultas o valor definido em LANG
		$ cat /etc/default/locale
		: LANG=pt_BR.utf8
	-Reiniciar instância
		$ sudo reboot
		
-Verificar se a máquina tem python3
	$ python3
	$ python --version (atualmente usando 3.8.10)
	
	-Instalação python3.8 de repositório externo
		$ sudo apt install software-properties-common -y
		$ sudo add-apt-repository ppa:deadsnakes/ppa -y
		$ sudo apt update
		$ sudo apt install python3.8 -y
		$ python3.8 --version
	
	-Tornar versão 3.8 (ou a que quiser) padrão
		-A versão padrão é a do link python3 dentro da pasta /usr/bin/
		-Refazer link ligando a versão que quer
			$ sudo ln -sf /usr/bin/python3.8 /usr/bin/python3

-Criar VirtualEnv
	-A VirtualEnv pode ser criada na pasta do usuario do sistema (ubuntu)
	$ python3 -m venv NOME_VENV
	- Instalação venv no python3.8 quando não nativo
		$  sudo apt install python3.8-venv
	-Ativar VirtualEnv
		$ source NOME_VENV/bin/activate


-Clonar projeto na VirtualEnv
	-Configurar usuário e senha globais do git
		$ git config --global user.name "fname lname"
		$ git config --global user.email "example@gmail.com"
		$ git config --global user.password "secret"
	-Criar chave para conexão ssh com GitHub (se o anterior não der certo ou quiser usar por ssh para mais segurança).
		$ ssh-keygen -t ed25519 -C "your_email@example.com"
			: Generating public/private algorithm key pair.
		-Quando aparecer a solicitação "Enter a file in which to save the key" (Insira um arquivo no qual salvar a chave), presssione Enter. O local padrão do arquivo será aceito.
		-Digite uma frase secreta segura no prompt.
	-Verificar chaves existentes (se foi criada)
		$ ls -al ~/.ssh
			: lista de arquivos na pasta '.ssh'. As chaves são os arquivos .pub
	-Verificar chaves SSH existentes
		$ eval "$(ssh-agent -s)"
			 : AGENT pid 59566
		$ ssh-add ~/.ssh/id_ed25519
			: Identity added: id_ed25519 (email)
	-Adicionar a chave criada à conta GitHub
		-Copiar chave para área de transferência
			$ clip < ~/.ssh/id_ed25519.pub
			# Copies the contents of the id_ed25519.pub file to your clipboard
			-Se comando clip não funcionar usar comando cat e copiar texto direto do terminal
				$ cat ~/.ssh/id_ed25519.pub
		-No site do GitHub, clicar no perfil > settings >access > SSH and GP keys > New SSH key ou Add SSH key
		-Adicionar etiqueta no title e colar chave no campo key
		-Clicar em Add SSH key
	-Clonar diretório efetivamente, dentro do diretório /media, que dá acesso para o usuário www-data
		$ git clone git@github.com:NOME_USUARIO/NOME_REPOSITORIO.git
	-Instalar requirements
		$ pip install -r requirements.txt
	-Acrescentar arquivo local_settiongs.py no projeto
	-Criar tabelas no banco
		$ python manage.py migrate
	-Criar suepr usuário
		$ python manage.py createsuperuser
	-Testar projeto e conexão
		$ python manage.py runserver 0:8000 (ou a porta que for usar)

-Instalar uWSGI
	https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html
	---Para limpar o cach após desinstalações
		$ hash -r
	-Instalar python dev
		$ sudo apt-get install pythonX.Y-dev
		Ex: sudo apt-get install python3.8-dev
	-Instalar pip na VirtualEnv
		-Verificar se a versão do python escolhida está setada como default no link localizado em /usr/bin/
		$ sudo apt-get install pip
	-Atualizar pip
		$ python3.8 -m pip install --upgrade pip
	-Instalar uWSGI dentro da VirtualEnv
		$ sudo pip install uwsgi
		*Testar com sudo e sem
	-Criar arquivo test.py (em qualquer lugar)
		def application(env, start_response):
			start_response('200 OK', [('Content-Type','text/html')])
			return [b"Hello World"] # python3
	-Rodar uWSGI
		$ uwsgi --http :8000 --wsgi-file test.py
			: Browser retorna a frase "Hello World"
	-Rodar projeto django
		-Ir para pasta do projeto (src)
		$ uwsgi --http :8000 --module NOME_PROJETO.wsgi
			-Se debug=False vai retornar error 500.
			
-Instalar nginx
	-Instalar nginx
		$ sudo apt-get install nginx
	-Iniciar nginx
		$ sudo /etc/init.d/nginx start
	-ATENÇÃO: o nginx utiliza o usuário www-data para execução, não possuindo acesso aos arquivos exclusivos do usuário ubuntu. Colocar arquivos que deverão ser executados pelo nginx em pasta que dê acesso ao usuário www-data e garanta a segurança, como a pasta /media. Do contrário vai retornar erro 403 Forbidden.
		-Verificar as pastas da raiz e se tem alguma no grupo www-data e com acesso drwxr-xr-x (provavelmente a pasta media)
			$ ls -la /
		-Certificar que o programa foi clonado dentro desta pasta
		-Gravar o grupo www-data na pasta do projeto
			$ sudo chown -R ubuntu:www-data PASTA_PROJETO
				-Esse comando aplica recursivamente para a pasta PASTA_PROJETO e todo o seu conteúdo, informando que o usuário proprietário é "ubuntu" e o grupo é "www-data".
		-Dar acesso drwxr-xr-x à parsta do projeto, sem recursividade para proteger outros arquivos
			$ sudo chmod 755 PASTA_PROJETO
		-Adiante, gravar acesso 755 ao arquivo uwsgi_params, pastas media e static (serão criados adiante)
	-Criar arquivo uwsgi_params na pasta do projeto
		uwsgi_param  QUERY_STRING       $query_string;
		uwsgi_param  REQUEST_METHOD     $request_method;
		uwsgi_param  CONTENT_TYPE       $content_type;
		uwsgi_param  CONTENT_LENGTH     $content_length;

		uwsgi_param  REQUEST_URI        $request_uri;
		uwsgi_param  PATH_INFO          $document_uri;
		uwsgi_param  DOCUMENT_ROOT      $document_root;
		uwsgi_param  SERVER_PROTOCOL    $server_protocol;
		uwsgi_param  REQUEST_SCHEME     $scheme;
		uwsgi_param  HTTPS              $https if_not_empty;

		uwsgi_param  REMOTE_ADDR        $remote_addr;
		uwsgi_param  REMOTE_PORT        $remote_port;
		uwsgi_param  SERVER_PORT        $server_port;
		uwsgi_param  SERVER_NAME        $server_name;
	-Dar acesso ao usuário www-data ao arquivo uwsgi_params
		$ sudo chmod 755 uwsgi_params
	-Criar arquivo NOME_PROJETO.conf na pasta /etc/nginx/sites-available/
		# mysite_nginx.conf
		#Este arquivo diz ao nginx para servir mídia e arquivos estáticos do sistema de arquivos, bem como lidar com solicitações que requerem a intervenção do Django

		# the upstream component nginx needs to connect to
		upstream django {
			# server unix:///media/PASTA_PROJETO/mysite.sock; # for a file socket
			server 127.0.0.1:8001; # for a web port socket (we'll use this first)
		}

		# configuration of the server
		server {
			# the port your site will be served on
			listen      8000;
			# the domain name it will serve for
			server_name example.com; # substitute your machine's IP address or FQDN
			charset     utf-8;

			# max upload size
			client_max_body_size 75M;   # adjust to taste

			# Django media
			location /media  {
				alias /media/PASTA_PROJETO/media;  # your Django project's media files - amend as required
			}

			location /static {
				alias /media/PASTA_PROJETO/static; # your Django project's static files - amend as required
			}

			# Finally, send all non-media requests to the Django server.
			location / {
				uwsgi_pass  django;
				include     /media/PASTA_PROJETO/uwsgi_params; # the uwsgi_params file you installed
			}
		}
	-Ir para pasta do projeto (src) e copiar o caminho
		$ pwd
	-Criar link simbólico para este arquivo em /etc/nginx/sites-enabled para que o nginx possa vê-lo:
		$ sudo ln -s /etc/nginx/sites-available/mysite_nginx.conf /etc/nginx/sites-enabled/
	-Coletar arquivos estáticos
		$ python manage.py collectstatic
	-Verificar se o diretório media está configurado no settings.py
	-Reinicie o nginx
		$ sudo /etc/init.d/nginx restart
	-Criar a pasta media no diretório da aplicação e baixar alguma imagem para teste
		$ wget URL
	-Dar acesso às pastas media e static ao grupo www-data, se não tiver, e gravar permissões de acesso para evitar erro 403 Forbidden
		$ sudo chmod -R 755 media
		$ sudo chown -R ubuntu:www-data media (conferir se já está)
		$ sudo chmod -R 755 static
		$ sudo chown -R ubuntu:www-data static (conferir se já está)
	-Testar o acesso a midia baixada
		http://IP:8000/media/NOME_IMAGE.EXTENSAO
	-Testar se nginx e uWSGI funcionam com o test.py acessando a raiz do IP com a porta selecionada (8000)
		$ uwsgi --socket :8001 --wsgi-file test.py
	
-Configurar socket UNIX
		-Editar mysite_nginx.conf (arquivo conf criado em /etc/nginx/sites-available/), comentando a linha do server IP e descomentando a de cima (server unix)
			server unix:///media/PASTA_PROJETO/mysite.sock;
			# server 127.0.0.1:8001;
			(Lembrar de deixar 3 barras no início do caminho e sem barra depois do nome do arquivo mysite.sock)
		-Reiniciar nginx
			$ sudo /etc/init.d/nginx restart
		-Executar o uWSGI novamente
			$ uwsgi --socket CAMINHO_ATE_SOCK_CONFIGURADO/mysite.sock --wsgi-file test.py
			Ex: uwsgi --socket escritorio/src/mysite.sock --wsgi-file test.py
		-Se retornar 502 Bad Gateway tentar alterar a permissão do socket, adicionando --chmod-socket=664 no final do comando
			$ uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=664 # (very permissive)
		-Se ainda não funcionar alterar para permissão mais sensível, adicionando --chmod-socket=666 no final do comando
			$ uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666 # (more sensible)
-Executar aplicativo Django com uWSGI e nginx
	$ uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=664
	(Adicionar o chmod-socket somente se for verificada a necessidade com o teste anterior do arquivo test.py)
	Ex: uwsgi --socket escritorio.sock --module sparta_escritorio.wsgi
		uwsgi --socket escritorio.sock --module sparta_escritorio.wsgi --chmod-socket=666
	
-Configurar arquivo .ini para uWSGI rodar automaticamente
	-Criar arquivo mysite.ini na pasta do projeto
		# mysite_uwsgi.ini file
		[uwsgi]

		# Django-related settings
		# the base directory (full path)
		chdir           = /path/to/your/project
		# Django's wsgi file
		module          = project.wsgi
		# the virtualenv (full path)
		home            = /path/to/virtualenv

		# process-related settings
		# master
		master          = true
		# maximum number of worker processes
		processes       = 10
		# the socket (use the full path to be safe
		socket          = /path/to/your/project/mysite.sock
		# ... with appropriate permissions - may be needed
		chmod-socket    = 666 #verificar necessidade conforme testes anteriores
		# clear environment on exit
		vacuum          = true
	-Executar o arquivo INI
		$ uwsgi --ini mysite_uwsgi.ini

-Instalar Emperor mode
	-Criar o diretório vassals
		$ sudo mkdir -p /etc/uwsgi/vassals
	# Criar link do arquivo INI no diretório criado
		$ sudo ln -s /CAMINHO_ARQUIVO_INI/mysite_uwsgi.ini /etc/uwsgi/vassals/
	# Rodar Emperor indicando o uwsgi da VirtualEnv
		$ /home/ubuntu/PASTA_VENV/bin/uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data
		* Rodar com sudo se necessário

-Configurar com systemd para iniciar automaticamente
	-Acessar pasta dos arquivos de configuração do systemd
		$ cd /etc/systemd/system
	-Criar arquivo uwsgi_NOME_APP.service
		$ sudo vim uwsgi_NOME_APP.service
	-Conteúdo do arquivo:	
		[Unit]
		Description=uWSGI Django NOME_PROJETO (descrição livre para identificar)
		After=syslog.target

		[Service]
		ExecStart=/home/ubuntu/escritorio/bin/uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data (mesmo comando para rodar emperor)
		# Requires systemd version 211 or newer
		RuntimeDirectory=uwsgi
		Restart=always
		KillSignal=SIGQUIT
		Type=notify
		StandardError=syslog
		NotifyAccess=all
		User=ubuntu

		[Install]
		WantedBy=multi-user.target
	-Alterar a permissão do arquivo para 664
		- sudo chmod 664 /etc/systemd/system/uwsgi_NOME_APP.service
	-Reiniciar systemctl
		$ sudo systemctl daemon-reload
	-Habilitar o serviço para indicar que deve iniciar automaticamente quando a maquina ligar
		$ sudo systemctl enable uwsgi_NOME_APP.service
		: Created symlink /etc....
	-Start no service
		$ sudo systemctl start uwsgi_NOME_APP.service
	-Para parar o serviço
		$ sudo systemctl stop uwsgi_NOME_APP.service
	-Para ver status
		$ sudo systemctl status uwsgi_NOME_APP.service
	-Para ver log
		$ sudo journalctl -u uwsgi_escritorio.service
		
	-Configurar journalctl
		$ sudo journalctl --disk-usage
			Exibe o espaço em disco usado pelos logs.
		$ sudo journalctl --vacuum-size=200M
			Reduz o tamanho dos logs para 200MB.
		$ sudo journalctl --vacuum-time=30d
			Remove logs mais antigos do que 30 dias.
		$ sudo journalctl --rotate
			Rotaciona os logs.

-Proteger pasta media para acesso apenas por usuários logados
	-sudo vim /etc/nginx/sites-available/NOME_PROJETO_nginx.conf
	-Alterar o location "/media" para "/protected" e adicionar internal; para somente ter acesso por requisição do próprio servidor
		 # Django media
		location /protected  {
			internal;
			alias /media/escritorio/media;  # your Django project's media files - amend as required
		}
	-Garantir que o urls.py principal do Django esteja executando acessos a media com filtro de login
		url(r'^media/(?P<path>.*)', protected_files, name='media'),
	-Método protected_files na view própria (normalmente core):
		@login_required
		def protected_files(request, path):
			access_granted = False

			user = request.user
			if user.is_authenticated:
				# if user.is_staff:
				if user.is_superuser:
					# If admin, everything is granted
					access_granted = True
				# else:
				#     # For simple user, only their documents can be accessed
				#     user_documents = [
				#         user.identity_document,
				#         # add here more allowed documents
				#     ]

				#     for doc in user_documents:
				#         if path == doc.name:
				#             access_granted = True

			if access_granted:
				response = HttpResponse()
				del response['Content-Type']
				response['X-Accel-Redirect'] = '/protected/{0}'.format(path)
				return response
			else:
				return HttpResponseForbidden('Not authorized to access this media.')

-Automação Versionamento
	- Criar arquivo versao.sh com comandos Script Bash para serem executados.
		#!/bin/bash
		source /home/ubuntu/escritorio/bin/activate #Ativer VirtualEnv
		cd media/PASTA_PROJETO #Entrar na pasta do projeto caso não esteja
		git pull # Pode não funcionar em ssh devido a não estar na pasta ubuntu.
		pip install -r requirements.txt #Instalação automática de novos requirements
		python manage.py migrate #Migrate no banco
		sudo systemctl restart uwsgi_escritoiirio.service #Reiniciar serviço systemctl
	-Para script mais detalhado, com cores e perguntas, acessar tutorial "Bash Script Auto Versão"

-Set porta 80
	-Altear a porta do nginx para porta 80
		$ sudo vim /etc/nginx/sites-available/escritorio_nginx.conf
			# the port your site will be served on
			listen      80;
	-Reiniciar nginx
		& sudo /etc/init.d/nginx restart

	-Caso dê errado pode haver outro serviço já rodando na porta 80, como apache. Nesse caso pesquisar sobre tutorial próprio ou desativar o serviço, caso não seja necessário.